// copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved<br>
//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>
//
// Generated by apg-js, Version 4.0.0 [apg-js](https://github.com/ldthomas/apg-js)
module.exports = function grammar(){
  // ```
  // SUMMARY
  //      rules = 8
  //       udts = 0
  //    opcodes = 35
  //        ---   ABNF original opcodes
  //        ALT = 4
  //        CAT = 7
  //        REP = 4
  //        RNM = 8
  //        TLS = 9
  //        TBS = 0
  //        TRG = 3
  //        ---   SABNF superset opcodes
  //        UDT = 0
  //        AND = 0
  //        NOT = 0
  //        BKA = 0
  //        BKN = 0
  //        BKR = 0
  //        ABG = 0
  //        AEN = 0
  // characters = [0 - 1114111]
  // ```
  /* OBJECT IDENTIFIER (for internal parser use) */
  this.grammarObject = 'grammarObject';

  /* RULES */
  this.rules = [];
  this.rules[0] = {name: 'expression', lower: 'expression', index: 0, isBkr: false};
  this.rules[1] = {name: 'source', lower: 'source', index: 1, isBkr: false};
  this.rules[2] = {name: 'header-reference', lower: 'header-reference', index: 2, isBkr: false};
  this.rules[3] = {name: 'payload-reference', lower: 'payload-reference', index: 3, isBkr: false};
  this.rules[4] = {name: 'fragment', lower: 'fragment', index: 4, isBkr: false};
  this.rules[5] = {name: 'reference-token', lower: 'reference-token', index: 5, isBkr: false};
  this.rules[6] = {name: 'unescaped', lower: 'unescaped', index: 6, isBkr: false};
  this.rules[7] = {name: 'escaped', lower: 'escaped', index: 7, isBkr: false};

  /* UDTS */
  this.udts = [];

  /* OPCODES */
  /* expression */
  this.rules[0].opcodes = [];
  this.rules[0].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[0].opcodes[1] = {type: 7, string: [36,109,101,115,115,97,103,101,46]};// TLS
  this.rules[0].opcodes[2] = {type: 4, index: 1};// RNM(source)

  /* source */
  this.rules[1].opcodes = [];
  this.rules[1].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[1].opcodes[1] = {type: 4, index: 2};// RNM(header-reference)
  this.rules[1].opcodes[2] = {type: 4, index: 3};// RNM(payload-reference)

  /* header-reference */
  this.rules[2].opcodes = [];
  this.rules[2].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[2].opcodes[1] = {type: 7, string: [104,101,97,100,101,114]};// TLS
  this.rules[2].opcodes[2] = {type: 3, min: 0, max: 1};// REP
  this.rules[2].opcodes[3] = {type: 2, children: [4,5]};// CAT
  this.rules[2].opcodes[4] = {type: 7, string: [35]};// TLS
  this.rules[2].opcodes[5] = {type: 4, index: 4};// RNM(fragment)

  /* payload-reference */
  this.rules[3].opcodes = [];
  this.rules[3].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[3].opcodes[1] = {type: 7, string: [112,97,121,108,111,97,100]};// TLS
  this.rules[3].opcodes[2] = {type: 3, min: 0, max: 1};// REP
  this.rules[3].opcodes[3] = {type: 2, children: [4,5]};// CAT
  this.rules[3].opcodes[4] = {type: 7, string: [35]};// TLS
  this.rules[3].opcodes[5] = {type: 4, index: 4};// RNM(fragment)

  /* fragment */
  this.rules[4].opcodes = [];
  this.rules[4].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[4].opcodes[1] = {type: 2, children: [2,3]};// CAT
  this.rules[4].opcodes[2] = {type: 7, string: [47]};// TLS
  this.rules[4].opcodes[3] = {type: 4, index: 5};// RNM(reference-token)

  /* reference-token */
  this.rules[5].opcodes = [];
  this.rules[5].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[5].opcodes[1] = {type: 1, children: [2,3]};// ALT
  this.rules[5].opcodes[2] = {type: 4, index: 6};// RNM(unescaped)
  this.rules[5].opcodes[3] = {type: 4, index: 7};// RNM(escaped)

  /* unescaped */
  this.rules[6].opcodes = [];
  this.rules[6].opcodes[0] = {type: 1, children: [1,2,3]};// ALT
  this.rules[6].opcodes[1] = {type: 5, min: 0, max: 46};// TRG
  this.rules[6].opcodes[2] = {type: 5, min: 48, max: 125};// TRG
  this.rules[6].opcodes[3] = {type: 5, min: 127, max: 1114111};// TRG

  /* escaped */
  this.rules[7].opcodes = [];
  this.rules[7].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[7].opcodes[1] = {type: 7, string: [126]};// TLS
  this.rules[7].opcodes[2] = {type: 1, children: [3,4]};// ALT
  this.rules[7].opcodes[3] = {type: 7, string: [48]};// TLS
  this.rules[7].opcodes[4] = {type: 7, string: [49]};// TLS

  // The `toString()` function will display the original grammar file(s) that produced these opcodes.
  this.toString = function toString(){
    let str = "";
    str += "; AsyncAPI runtime expression ABNF syntax - https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#runtimeExpression\n";
    str += "expression         = ( \"$message.\" source )\n";
    str += "source             = ( header-reference / payload-reference )\n";
    str += "header-reference   = \"header\"  [\"#\" fragment]\n";
    str += "payload-reference  = \"payload\" [\"#\" fragment]\n";
    str += "fragment           = *( \"/\" reference-token )\n";
    str += "reference-token    = *( unescaped / escaped )\n";
    str += "unescaped          = %x00-2E / %x30-7D / %x7F-10FFFF ; %x2F ('/') and %x7E ('~') are excluded from 'unescaped'\n";
    str += "escaped            = \"~\" ( \"0\" / \"1\" ) ; representing '~' and '/', respectively\n";
    return str;
  }
}
